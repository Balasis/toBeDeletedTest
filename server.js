// Importing dependencies
const express = require('express'); // Express framework to build our API
const connectDB = require('./src/backend/config/db'); // Function to connect to the MongoDB database
const logger = require('./src/backend/utils/logger'); // Custom logger to log incoming requests and other details
const path = require('path'); // Node.js module for handling and transforming file paths
const config = require('./src/backend/config/config'); // Configuration file (e.g., PORT and MONGO_URI)
const apiRoutes = require('./src/backend/routes/api'); // Routes for our API (we'll define this in the routes folder)

// Initialize Express app
const app = express();

// Connect to MongoDB using the configuration settings
connectDB();

// Middleware setup:
// Middleware is applied globally to every route in the app

// 1. express.json() - This middleware parses incoming JSON request bodies
// It automatically converts the incoming request data (which should be in JSON format) into JavaScript objects.
// This is important for POST, PUT, or PATCH requests that carry data in the request body.
// Express recognize that in get requests (no body) this is not needed and therefore it skips it.
app.use(express.json());

// 2. logger middleware - Custom logging middleware that will log details of every incoming request
// Typically, it can log the request method, URL, and any additional information needed (e.g., time of the request)
app.use(logger);


// Routes setup:
// 'apiRoutes' imports all the API route handlers and applies them under the '/api' base path.
// This allows you to define various routes in the routes folder and keep things modular.
// The /api routes are typically used for handling data requests (like raw data from a database) and not for serving whole web pages.
// Internally, when Express calls app.use(), it checks if the second parameter is an instance of express.Router(object)
// or a middleware function
app.use('/api', apiRoutes);


// Static file handling for production:
// We are serving static files generated by the frontend build process (e.g., by Vite or React) from the 'dist' folder.
// The path is constructed dynamically to point to the correct location of the built assets.
const frontendPath = path.join(__dirname, '../../dist');
app.use(express.static(frontendPath));

// Catch-all route to handle all other requests (like when a user directly accesses the root URL in production)
// This route sends the 'index.html' file, which is typically the main entry point for frontend applications.
app.get('*', (req, res) => {
  res.sendFile(path.join(frontendPath, 'index.html'));
});

// Start the server:
// We're using the PORT defined in our configuration (config.PORT), or fallback to 5000 if not provided.
// This starts the Express server and listens for incoming requests on the specified port.
app.listen(config.PORT, () => {
  console.log(`Server running at http://localhost:${config.PORT}`);
});
